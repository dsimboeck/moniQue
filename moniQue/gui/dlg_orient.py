# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MoniQueDialog
                                 A QGIS plugin
 Monoplotting oblique images.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-02-07
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Sebastian Mikolka-Flöry
        email                : s.floery@gmx.at
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import open3d as o3d
import numpy as np

from qgis.PyQt import QtWidgets, QtCore, QtGui
from qgis.gui import QgsProjectionSelectionWidget
from qgis.core import (
    Qgis,
    QgsProject,
    QgsVectorLayer,
    QgsFeature,
    QgsField,
    QgsGeometry,
    QgsPointXY,
    QgsVectorFileWriter,
)

class OrientDialog(QtWidgets.QDialog):
    
    gcp_selected_signal = QtCore.pyqtSignal(object)
    gcp_deselected_signal = QtCore.pyqtSignal()
    gcp_delete_signal = QtCore.pyqtSignal(object)
    
    def __init__(self, parent=None, icon_dir=None, active_iid=None):
        """Constructor."""
        super(OrientDialog, self).__init__()

        self.name2ix = {"gid":1,
                "X":2,
                "Y":3,
                "Z":4,
                "x":5,
                "y":6,
                "dx":7,
                "dy":8}
        
        self.prev_row = -1
        
        self.parent = parent
        self.parent.img_list.setEnabled(False)
        self.parent.activate_gcp_picking()

        self.icon_dir = icon_dir

        self.setWindowTitle("%s - Camera parameter estimation" % (active_iid))
        self.resize(800, 400)
        self.setMinimumSize(QtCore.QSize(800, 400))
        self.setMaximumSize(QtCore.QSize(800, 400))
        
        self.main_toolbar = QtWidgets.QToolBar("My main toolbar")
        self.main_toolbar.setIconSize(QtCore.QSize(20, 20))

        self.btn_init_ori = QtWidgets.QAction("Set initial orientation from camera view.", self)
        self.btn_init_ori.setIcon(QtGui.QIcon(os.path.join(self.icon_dir, "mActionMeasureBearing.png")))
        # self.btn_ori_tool.triggered.connect(self.show_orient_dlg)
        # self.btn_ori_tool.setCheckable(True)
        # self.btn_ori_tool.setEnabled(False)
        self.main_toolbar.addAction(self.btn_init_ori)

        self.btn_delete_gcp = QtWidgets.QAction("Delete selected GCP.", self)
        self.btn_delete_gcp.setIcon(QtGui.QIcon(os.path.join(self.icon_dir, "mActionDeleteSelectedFeatures.png")))
        self.btn_delete_gcp.triggered.connect(self.delete_selected_gcp)
        # self.btn_ori_tool.setCheckable(True)
        self.btn_delete_gcp.setEnabled(False)
        self.main_toolbar.addAction(self.btn_delete_gcp)

        self.table_gcps = QtWidgets.QTableWidget()
        
        self.table_gcps.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.table_gcps.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table_gcps.setAlternatingRowColors(True)
        self.table_gcps.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.table_gcps.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.table_gcps.setObjectName("table_gcps")
        self.table_gcps.setColumnCount(9)
        self.table_gcps.setRowCount(0)
        
        self.table_gcps.cellClicked.connect(self.gcp_selected)
    
        self.table_gcps.horizontalHeader().setHighlightSections(True)
        self.table_gcps.horizontalHeader().resizeSection(0, 10)
        self.table_gcps.horizontalHeader().resizeSection(1, 50)
        self.table_gcps.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.Stretch)
        self.table_gcps.horizontalHeader().resizeSection(2, 80)
        self.table_gcps.horizontalHeader().resizeSection(3, 80)
        self.table_gcps.horizontalHeader().resizeSection(4, 80)
        self.table_gcps.horizontalHeader().resizeSection(5, 70)
        self.table_gcps.horizontalHeader().resizeSection(6, 70)
        self.table_gcps.horizontalHeader().resizeSection(7, 60)
        self.table_gcps.horizontalHeader().resizeSection(8, 60)

        self.table_gcps.verticalHeader().setVisible(False)
        
        self.table_gcps.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)

        self.table_gcps.setHorizontalHeaderLabels(["use", "gid", "X", "Y", "Z", "x", "y", "dx", "dy"])

        params_layout = QtWidgets.QVBoxLayout()
        params_layout.setSpacing(3)
    
        def create_cam_param_layout(param=None, label_size=25, line_size=125, unit=None):

            layout = QtWidgets.QHBoxLayout()
            param_label = QtWidgets.QLabel(param)
            param_label.setMinimumSize(QtCore.QSize(25, 10))
            param_label.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)

            param_line = QtWidgets.QLineEdit()
            param_line.setMinimumSize(QtCore.QSize(125, 10))
            param_line.setReadOnly(True)
            unit_label = QtWidgets.QLabel(unit)
            unit_label.setMinimumSize(QtCore.QSize(25, 10))

            layout.addWidget(param_label)
            layout.addWidget(param_line)
            layout.addWidget(unit_label)

            return layout, param_line

        prc_x_layout, prc_x_line = create_cam_param_layout(param="X<sub>0</sub>: ", unit=" [m]")
        prc_y_layout, prc_y_line = create_cam_param_layout(param="Y<sub>0</sub>: ", unit=" [m]")
        prc_z_layout, prc_z_line = create_cam_param_layout(param="Z<sub>0</sub>: ", unit=" [m]")

        alpha_layout, alpha_line = create_cam_param_layout(param="\u03B1: ", unit=" [°]")
        zeta_layout, zeta_line = create_cam_param_layout(param="\u03B6: ", unit=" [°]")
        kappa_layout, kappa_line = create_cam_param_layout(param="\u03BA: ", unit=" [°]")

        focal_layout, focal_line = create_cam_param_layout(param="f: ", unit=" [px]")
        
        params_layout.addLayout(prc_x_layout)
        params_layout.addLayout(prc_y_layout)
        params_layout.addLayout(prc_z_layout)
        
        params_layout.addLayout(alpha_layout)
        params_layout.addLayout(zeta_layout)
        params_layout.addLayout(kappa_layout)

        params_layout.addLayout(focal_layout)

        params_layout.addStretch()
        
        self.btn_calc_ori = QtWidgets.QPushButton("Calculate")
        self.btn_save_ori = QtWidgets.QPushButton("Save")
        
        btn_layout = QtWidgets.QHBoxLayout()
        btn_layout.setContentsMargins(5, 0, 0, 0)
        btn_layout.addWidget(self.btn_calc_ori)
        btn_layout.addWidget(self.btn_save_ori)

        params_layout.addLayout(btn_layout)

        main_layout = QtWidgets.QHBoxLayout()
        main_layout.setSpacing(0)
        main_layout.setContentsMargins(5, 0, 5, 0)
        main_layout.addWidget(self.table_gcps)
        main_layout.addLayout(params_layout)

        layout = QtWidgets.QVBoxLayout()
        layout.setSpacing(0)
        layout.setContentsMargins(0, 0, 0, 5)
        layout.addWidget(self.main_toolbar)
        layout.addLayout(main_layout)
        self.setLayout(layout)

    def gcp_selected(self, rix, cix):
    
        if cix != 0:
    
            #row was already selected; hence only deselect
            if rix == self.prev_row:
                self.btn_delete_gcp.setEnabled(False)
                self.table_gcps.clearSelection()
                self.prev_row = -1
                self.gcp_deselected_signal.emit()

            else:
                self.btn_delete_gcp.setEnabled(True)
                self.table_gcps.setCurrentCell(rix, cix)
                self.prev_row = rix

                self.sel_gid = self.table_gcps.item(rix, 1).text()
                self.gcp_selected_signal.emit({"gid":self.sel_gid})
    
    def delete_selected_gcp(self):
        self.gcp_delete_signal.emit({"gid":self.sel_gid})
        
        self.table_gcps.removeRow(self.prev_row)
        self.table_gcps.clearSelection()
        self.prev_row = -1
        self.btn_delete_gcp.setEnabled(False)
        
    def closeEvent(self, event):
        self.parent.img_list.setEnabled(True)
        self.parent.btn_ori_tool.setChecked(False)

        self.parent.deactivate_gcp_picking()

        # self.close_dialog_signal.emit()

        # gpkg_layout = QtWidgets.QHBoxLayout()
        # gpkg_label = QtWidgets.QLabel("GPKG Path")
        # self.gpkg_line = QtWidgets.QLineEdit()
        # self.gpkg_line.setEnabled(False)
        # self.gpkg_btn = QtWidgets.QPushButton()
        # self.gpkg_btn.clicked.connect(self.set_gpkg_path)
        
        # gpkg_layout.addWidget(gpkg_label)
        # gpkg_layout.addWidget(self.gpkg_line)
        # gpkg_layout.addWidget(self.gpkg_btn)

        # mesh_layout = QtWidgets.QHBoxLayout()
        # mesh_label = QtWidgets.QLabel("Mesh Path")
        # self.mesh_line = QtWidgets.QLineEdit()
        # self.mesh_line.setEnabled(False)
        # self.mesh_btn = QtWidgets.QPushButton()
        # self.mesh_btn.clicked.connect(self.set_mesh_path)

        # mesh_layout.addWidget(mesh_label)
        # mesh_layout.addWidget(self.mesh_line)
        # mesh_layout.addWidget(self.mesh_btn)
        
        # crs_layout = QtWidgets.QHBoxLayout()
        # crs_label = QtWidgets.QLabel("Project CRS")
        # self.crs_widget = QgsProjectionSelectionWidget()
        # self.crs_widget.crsChanged.connect(self.set_crs)

        # crs_layout.addWidget(crs_label)
        # crs_layout.addWidget(self.crs_widget)
        
        # btn_layout = QtWidgets.QHBoxLayout()
        # self.create_btn = QtWidgets.QPushButton("Create")
        # self.create_btn.setEnabled(False)
        # self.create_btn.clicked.connect(self.create_project)
        
        # btn_layout.addStretch(1)
        # btn_layout.addWidget(self.create_btn)
        
        # main_layout.addLayout(gpkg_layout)
        # main_layout.addLayout(mesh_layout)
        # main_layout.addLayout(crs_layout)
        # main_layout.addLayout(btn_layout)
        # main_layout.addStretch(1)
        # self.setLayout(main_layout)
    
    def add_gcp_to_table(self, data, gcp_type=None):
        
        nr_rows = self.table_gcps.rowCount()
        nr_cols = self.table_gcps.columnCount()
        
        gcp_exists = False
                
        for rix in range(nr_rows):
            if self.table_gcps.item(rix, 1).text() == data["gid"]:
                
                if gcp_type == "obj_space":
                    self.table_gcps.setItem(rix, self.name2ix["X"], QtWidgets.QTableWidgetItem("%.1f" % (data["obj_x"])))
                    self.table_gcps.setItem(rix, self.name2ix["Y"], QtWidgets.QTableWidgetItem("%.1f" % (data["obj_y"])))
                    self.table_gcps.setItem(rix, self.name2ix["Z"], QtWidgets.QTableWidgetItem("%.1f" % (data["obj_z"])))
                
                elif gcp_type == "img_space":
                    self.table_gcps.setItem(rix, self.name2ix["x"], QtWidgets.QTableWidgetItem("%.1f" % (data["img_x"])))
                    self.table_gcps.setItem(rix, self.name2ix["y"], QtWidgets.QTableWidgetItem("%.1f" % (data["img_y"])))
                
                self.table_gcps.item(rix, 0).setCheckState(QtCore.Qt.Checked)
                self.table_gcps.item(rix, 0).setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)

                gcp_exists = True
                
                break
            
        if not gcp_exists:
            self.table_gcps.insertRow(nr_rows)
            self.table_gcps.setRowHeight(nr_rows, 25)

            chkBoxItem = QtWidgets.QTableWidgetItem()
            chkBoxItem.setFlags(QtCore.Qt.ItemIsUserCheckable)# | Qt.ItemIsEnabled)
            chkBoxItem.setCheckState(QtCore.Qt.Unchecked)
                    
            self.table_gcps.setItem(nr_rows, 0, chkBoxItem)
            self.table_gcps.setItem(nr_rows, self.name2ix["gid"], QtWidgets.QTableWidgetItem(str(data["gid"])))

            if gcp_type == "obj_space":
                self.table_gcps.setItem(nr_rows, self.name2ix["X"], QtWidgets.QTableWidgetItem("%.1f" % (data["obj_x"])))
                self.table_gcps.setItem(nr_rows, self.name2ix["Y"], QtWidgets.QTableWidgetItem("%.1f" % (data["obj_y"])))
                self.table_gcps.setItem(nr_rows, self.name2ix["Z"], QtWidgets.QTableWidgetItem("%.1f" % (data["obj_z"])))
            elif gcp_type == "img_space":
                self.table_gcps.setItem(nr_rows, self.name2ix["x"], QtWidgets.QTableWidgetItem("%.1f" % (data["img_x"])))
                self.table_gcps.setItem(nr_rows, self.name2ix["y"], QtWidgets.QTableWidgetItem("%.1f" % (data["img_y"])))
        
    def add_gcps_from_lyr(self, gcps):
        
        nr_gcps = len(gcps)
        
        for rx, (gid, data) in enumerate(gcps.items()):
            
            self.table_gcps.insertRow(rx)
            self.table_gcps.setRowHeight(rx, 25)

            chkBoxItem = QtWidgets.QTableWidgetItem()
            chkBoxItem.setFlags(QtCore.Qt.ItemIsUserCheckable)# | Qt.ItemIsEnabled)
            if data["active"] == 0:
                chkBoxItem.setCheckState(QtCore.Qt.Unchecked)
            else:
                chkBoxItem.setCheckState(QtCore.Qt.Unchecked)
            
            self.table_gcps.setItem(rx, 0, chkBoxItem)
            self.table_gcps.setItem(rx, self.name2ix["gid"], QtWidgets.QTableWidgetItem(gid))
            if data["obj_x"]:
                self.table_gcps.setItem(rx, self.name2ix["X"], QtWidgets.QTableWidgetItem("%.1f" % data["obj_x"]))
            
            if data["obj_y"]:
                self.table_gcps.setItem(rx, self.name2ix["Y"], QtWidgets.QTableWidgetItem("%.1f" % data["obj_y"]))
            
            if data["obj_z"]:
                self.table_gcps.setItem(rx, self.name2ix["Z"], QtWidgets.QTableWidgetItem("%.1f" % data["obj_z"]))
            
            if data["img_x"]:
                self.table_gcps.setItem(rx, self.name2ix["x"], QtWidgets.QTableWidgetItem("%.1f" % data["img_x"]))
            
            if data["img_y"]:                                        
                self.table_gcps.setItem(rx, self.name2ix["y"], QtWidgets.QTableWidgetItem("%.1f" % data["img_y"]))
            
            if data["img_dx"]:
                self.table_gcps.setItem(rx, self.name2ix["dx"], QtWidgets.QTableWidgetItem("%.1f" % data["img_dx"]))
            
            if data["img_dy"]:
                self.table_gcps.setItem(rx, self.name2ix["dy"], QtWidgets.QTableWidgetItem("%.1f" % data["img_dy"]))
    
    # def set_gpkg_path(self):
    #     gpkg_path = QtWidgets.QFileDialog.getSaveFileName(None, "GPKG path", "", ("Geopackage (*.gpkg)"))[0]
    #     if gpkg_path:
    #         self.gpkg_line.setText(gpkg_path)

    #         if (self.mesh_line.text() is not "") & (self.crs_widget.crs().isValid()):
    #             self.create_btn.setEnabled(True)
                
    # def set_mesh_path(self):
    #     mesh_path = QtWidgets.QFileDialog.getOpenFileName(None, "Open mesh", "", ("Mesh (*.ply)"))[0]   
    #     if mesh_path:
    #         self.mesh_line.setText(mesh_path)

    #         if (self.gpkg_line.text()  is not "") & (self.crs_widget.crs().isValid()):
    #             self.create_btn.setEnabled(True)

    # def set_crs(self):
    #     if (self.gpkg_line.text() is not "") & (self.mesh_line.text() is not "") & (self.crs_widget.crs().isValid()):
    #         self.create_btn.setEnabled(True)
    
    # def create_project(self):
    #     gpkg_path = self.gpkg_line.text()
    #     mesh_path = self.mesh_line.text()
    #     crs = self.crs_widget.crs().authid()
        
    #     QtWidgets.QApplication.instance().setOverrideCursor(QtCore.Qt.WaitCursor)
    #     transform_context = QgsProject.instance().transformContext() #necessary for writing
                
    #     mesh = o3d.io.read_triangle_mesh(mesh_path)
    #     nr_verts = int(np.asarray(mesh.vertices).shape[0])
    #     nr_faces = int(np.asarray(mesh.triangles).shape[0])
                
    #     mesh_bbox = mesh.get_axis_aligned_bounding_box()
    #     mesh_centroid = mesh_bbox.get_center()
    #     mesh_cx = mesh_centroid[0]
    #     mesh_cy = mesh_centroid[1]
        
    #     mesh_half_extent = mesh_bbox.get_half_extent()
    #     mesh_dx = mesh_half_extent[0]
    #     mesh_dy = mesh_half_extent[1]

    #     mesh_tl = [mesh_cx - mesh_dx, mesh_cy+mesh_dy]
    #     mesh_tr = [mesh_cx + mesh_dx, mesh_cy+mesh_dy]
    #     mesh_br = [mesh_cx + mesh_dx, mesh_cy-mesh_dy]
    #     mesh_bl = [mesh_cx - mesh_dx, mesh_cy-mesh_dy]
        
    #     mesh_bbox = [QgsPointXY(mesh_tl[0], mesh_tl[1]),
    #                  QgsPointXY(mesh_tr[0], mesh_tr[1]),
    #                  QgsPointXY(mesh_br[0], mesh_br[1]),
    #                  QgsPointXY(mesh_bl[0], mesh_bl[1]),
    #                  QgsPointXY(mesh_tl[0], mesh_tl[1])]
            
    #     reg_lyr = QgsVectorLayer("Polygon?crs=%s" % (crs), "region", "memory")
    #     pr = reg_lyr.dataProvider()
    #     pr.addAttributes([QgsField("name", QtCore.QVariant.String), 
    #                       QgsField("path", QtCore.QVariant.String), 
    #                       QgsField("nr_verts", QtCore.QVariant.Int), 
    #                       QgsField("nr_faces", QtCore.QVariant.Int), 
    #                       QgsField("minx", QtCore.QVariant.Double, "double", 10, 3), 
    #                       QgsField("maxx", QtCore.QVariant.Double, "double", 10, 3), 
    #                       QgsField("miny", QtCore.QVariant.Double, "double", 10, 3),
    #                       QgsField("maxy", QtCore.QVariant.Double, "double", 10, 3)])
    #     reg_lyr.updateFields() 
            
    #     # add a feature
    #     feat = QgsFeature()
    #     feat.setGeometry(QgsGeometry.fromPolygonXY([mesh_bbox]))
    #     feat.setAttributes([os.path.basename(mesh_path), 
    #                         mesh_path, 
    #                         nr_verts,
    #                         nr_faces, 
    #                         float(mesh_bl[0]), 
    #                         float(mesh_tr[0]), 
    #                         float(mesh_bl[1]), 
    #                         float(mesh_tr[1])])
    #     pr.addFeatures([feat])

    #     # update layer's extent when new features have been added
    #     # because change of extent in provider is not propagated to the layer
    #     reg_lyr.updateExtents()
        
    #     #write region layer to geopackage
    #     lyr_options = QgsVectorFileWriter.SaveVectorOptions()
    #     lyr_options.layerName = reg_lyr.name()
    #     lyr_options.driverName = "GPKG"
        
    #     if hasattr(QgsVectorFileWriter, 'writeAsVectorFormatV3'): #for QGIS Version >3.20
    #         use_v3 = True
    #         _writer = QgsVectorFileWriter.writeAsVectorFormatV3(reg_lyr, gpkg_path, transform_context, lyr_options)
    #     elif hasattr(QgsVectorFileWriter, 'writeAsVectorFormatV2'): #for QGIS Version <3.20
    #         use_v3 = False
    #         _writer = QgsVectorFileWriter.writeAsVectorFormatV2(reg_lyr, gpkg_path, transform_context, lyr_options)
            
    #     if _writer[0] == QgsVectorFileWriter.NoError:
    #         pass
    #     else:
    #         self.msg_bar.pushMessage("Error", "Could not create project.", level=Qgis.Critical, duration=3)
    #         raise ValueError("Could not create project!")
                            
    #     #create additionally needed layers and add them to the geopackage as well
    #     cam_lyr = QgsVectorLayer("Point?crs=%s" % (crs), "cameras", "memory")
    #     cam_pr = cam_lyr.dataProvider()
    #     cam_pr.addAttributes([QgsField("iid", QtCore.QVariant.String),
    #                           QgsField("path", QtCore.QVariant.String),
    #                           QgsField("ext", QtCore.QVariant.String),
    #                           QgsField("is_oriented", QtCore.QVariant.Int),
    #                           QgsField("X", QtCore.QVariant.Double, "double", 10, 3),
    #                           QgsField("Y", QtCore.QVariant.Double, "double", 10, 3),
    #                           QgsField("H", QtCore.QVariant.Double, "double", 10, 3),
    #                           QgsField("X_std", QtCore.QVariant.Double, "double", 10, 3),
    #                           QgsField("Y_std", QtCore.QVariant.Double, "double", 10, 3),
    #                           QgsField("H_std", QtCore.QVariant.Double, "double", 10, 3),
    #                           QgsField("alpha", QtCore.QVariant.Double, "double", 10, 5),
    #                           QgsField("zeta", QtCore.QVariant.Double, "double", 10, 3),
    #                           QgsField("kappa", QtCore.QVariant.Double, "double", 10, 5),
    #                           QgsField("alpha_std", QtCore.QVariant.Double, "double", 10, 3),
    #                           QgsField("zeta_std", QtCore.QVariant.Double, "double", 10, 5),
    #                           QgsField("kappa_std", QtCore.QVariant.Double, "double", 10, 3),
    #                           QgsField("s0", QtCore.QVariant.Double, "double", 10, 1),
    #                           QgsField("x0", QtCore.QVariant.Double, "double", 10, 1),
    #                           QgsField("y0", QtCore.QVariant.Double, "double", 10, 1),
    #                           QgsField("f", QtCore.QVariant.Double, "double", 10, 1),
    #                           QgsField("f_std", QtCore.QVariant.Double, "double", 10, 1),
    #                           QgsField("img_w", QtCore.QVariant.Int),
    #                           QgsField("img_h", QtCore.QVariant.Int),
    #                           QgsField("hfov", QtCore.QVariant.Double, "double", 6, 3),
    #                           QgsField("vfov", QtCore.QVariant.Double, "double", 6, 3)])
    #     cam_lyr.updateFields() 
                
    #     gcps_lyr = QgsVectorLayer("Point?crs=%s" % (crs), "gcps", "memory")
    #     gcps_pr = gcps_lyr.dataProvider()
    #     gcps_pr.addAttributes([QgsField("iid", QtCore.QVariant.String),
    #                           QgsField("gid", QtCore.QVariant.String),
    #                           QgsField("desc", QtCore.QVariant.String),
    #                           QgsField("X", QtCore.QVariant.Double, "double", 10, 3),
    #                           QgsField("Y", QtCore.QVariant.Double, "double", 10, 3),
    #                           QgsField("H", QtCore.QVariant.Double, "double", 10, 3),
    #                           QgsField("H_src", QtCore.QVariant.String),
    #                           QgsField("X_std", QtCore.QVariant.Double, "double", 10, 3),
    #                           QgsField("Y_std", QtCore.QVariant.Double, "double", 10, 3),
    #                           QgsField("H_std", QtCore.QVariant.Double, "double", 10, 3),
    #                           QgsField("active", QtCore.QVariant.String)])
    #     gcps_lyr.updateFields() 
        
    #     gcps_img_lyr = QgsVectorLayer("Point?crs=%s" % (crs), "gcps_img", "memory")
    #     gcps_img_pr = gcps_img_lyr.dataProvider()
    #     gcps_img_pr.addAttributes([QgsField("iid", QtCore.QVariant.String),
    #                           QgsField("gid", QtCore.QVariant.String),
    #                           QgsField("desc", QtCore.QVariant.String),
    #                           QgsField("x", QtCore.QVariant.Double, "double", 10, 1),
    #                           QgsField("y", QtCore.QVariant.Double, "double", 10, 1),
    #                           QgsField("dx", QtCore.QVariant.Double, "double", 10, 1),
    #                           QgsField("dy", QtCore.QVariant.Double, "double", 10, 1),
    #                           QgsField("active", QtCore.QVariant.String)])
    #     gcps_img_lyr.updateFields()
        
    #     # cam_hfov_lyr = QgsVectorLayer("Polygon?crs=%s" % (crs), "cameras_hfov", "memory")
    #     # cam_hfov_pr = cam_hfov_lyr.dataProvider()
    #     # cam_hfov_pr.addAttributes([QgsField("iid", QtCore.QVariant.String),
    #     #                            QgsField("is_oriented", QtCore.QVariant.Int),
    #     #                             QgsField("path", QtCore.QVariant.String),
    #     #                             QgsField("ext", QtCore.QVariant.String),
    #     #                             QgsField("w", QtCore.QVariant.Int),
    #     #                             QgsField("h", QtCore.QVariant.Int),
    #     #                             QgsField("hfov", QtCore.QVariant.Double, "double", 6, 3),
    #     #                             QgsField("vfov", QtCore.QVariant.Double, "double", 6, 3)])
    #     # cam_hfov_lyr.updateFields() 
        
    #     map_line_lyr = QgsVectorLayer("LineString?crs=%s" % (crs), "lines", "memory")
    #     map_line_pr = map_line_lyr.dataProvider()
    #     map_line_pr.addAttributes([QgsField("iid", QtCore.QVariant.String), 
    #                                QgsField("type", QtCore.QVariant.String), 
    #                                QgsField("comment", QtCore.QVariant.String)]);
    #     map_line_lyr.updateFields() 
        
    #     map_line_pnts_lyr = QgsVectorLayer("Point?crs=%s" % (crs), "lines_vx", "memory")
        
    #     img_line_lyr = QgsVectorLayer("LineString", "lines_img", "memory")
    #     img_line_pr = img_line_lyr.dataProvider()
    #     img_line_pr.addAttributes([QgsField("iid", QtCore.QVariant.String), 
    #                                QgsField("type", QtCore.QVariant.String), 
    #                                QgsField("comment", QtCore.QVariant.String)]);
    #     img_line_lyr.updateFields() 
        
    #     img_line_pnts_lyr = QgsVectorLayer("Point", "lines_img_vx", "memory")
        
    #     lyrs = [map_line_lyr, cam_lyr, map_line_pnts_lyr, img_line_lyr, img_line_pnts_lyr, gcps_lyr, gcps_img_lyr]              
        
    #     for lyr in lyrs:
    #         options = QgsVectorFileWriter.SaveVectorOptions()
    #         options.actionOnExistingFile = QgsVectorFileWriter.CreateOrOverwriteLayer    
    #         options.layerName = lyr.name()
    #         options.driverName = "GPKG"
            
    #         if use_v3: #QGIS < 3.20
    #             _writer = QgsVectorFileWriter.writeAsVectorFormatV3(lyr, gpkg_path, transform_context, options)
    #         else:
    #             _writer = QgsVectorFileWriter.writeAsVectorFormatV2(lyr, gpkg_path, transform_context, options)
            
    #         if _writer[0] == QgsVectorFileWriter.NoError:
    #             pass
    #         else:
    #             #! does not work; no message bar in the create dialog; necessary to send signal to main_dialog
    #             #! with error message as parameter
    #             # self.msg_bar.pushMessage("Error", "Could not create project.", level=Qgis.Critical, duration=3)
    #             # raise ValueError("Could not create project!")
    #             pass
        
    #     QtWidgets.QApplication.instance().restoreOverrideCursor()

    #     self.created_signal.emit({"gpkg_path":gpkg_path})
    #     self.close()